# **Depth First Search (DFS)**

Depth first Search or Depth first traversal is a recursive algorithm for searching all the vertices of a graph or tree data structure. Traversal means visiting all the nodes of aÂ graph.

## Depth First Search Algorithm

A standard DFS implementation puts each vertex of the graph into one of two categories:

1. Visited
2. Not Visited

The purpose of the algorithm is to mark each vertex as visited while avoiding cycles.

The DFS algorithm works as follows:

1. Start by putting any one of the graph's vertices on top of a stack.
2. Take the top item of the stack and add it to the visited list.
3. Create a list of that vertex's adjacent nodes. Add the ones which aren't in the visited list to the top of the stack.
4. Keep repeating steps 2 and 3 until the stack is empty.

#Depth First Search(DFS)
graph = {
    'A' : ['B','C','D'],
    'B' : ['E'],
    'C' : ['D','E'],
    'D' : [],
    'E' : []
}

visited = set()

def dfs(visited,graph,root):
  if root not in visited:
    print(root)
    visited.add(root)
    for i in graph[root]:
      dfs(visited,graph,i)


dfs(visited,graph,'A')
