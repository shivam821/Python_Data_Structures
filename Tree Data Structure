# **Tree Data Structure**

A tree is a nonlinear hierarchical data structure that consists of nodes connected by edges.

![https://cdn.programiz.com/sites/tutorial2program/files/tree_0.png](https://cdn.programiz.com/sites/tutorial2program/files/tree_0.png)

### **Tree Terminologies**

****Node****

A node is an entity that contains a key or value and pointers to its child nodes.

****Edge****

It is the link between any two nodes.

****Root****

It is the topmost node of a tree.

****Height of a Node****

The height of a node is the number of edges from the node to the deepest leaf (ie. the longest path from the node to a leaf node).

****Depth of a Node****

The depth of a node is the number of edges from the root to the node.

****Height of a Tree****

The height of a Tree is the height of the root node or the depth of the deepest node.

****Degree of a Node****

The degree of a node is the total number of branches of that node.

****Forest****

A collection of disjoint trees is called a forest.

#Tree Data Structure 

class Tree():
   def __init__(self,data):
     self.data = data
     self.left = None
     self.right = None

node1 = Tree(10)
node2 = Tree(20)
node3 = Tree(30)
node4 = Tree(40)
node5 = Tree(50)
node6 = Tree(60)
node7 = Tree(70)

node1.left = node2
node1.right = node3

print("Root : ",node1.data)
print("Left node of Node1 : ",node1.left.data)
print("Right node of Node1 : ",node1.right.data)
