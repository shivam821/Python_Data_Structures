# **Adjacency Matrix**

An adjacency matrix is a way of representing a graph as a matrix of booleans (0's and 1's). A finite graph can be represented in the form of a square matrix on a computer, where the boolean value of the matrix indicates if there is a direct path between two vertices.

![https://www.programiz.com/sites/tutorial2program/files/adjacency-matrix-graph.png](https://www.programiz.com/sites/tutorial2program/files/adjacency-matrix-graph.png)

We can represent this graph in matrix form like below.

#Adjacency Matrix
class Graph():
  def __init__(self,size):
    self.adjmatrix = []
    for i in range(size):
      self.adjmatrix.append([0 for i in range(size)])
    self.size = size

  def add_edge(self,v1,v2):
    if v1 == v2:
      print("same vertx")
    else:
      self.adjmatrix[v1][v2] = 1
      self.adjmatrix[v2][v1] = 1

  def remove_edge(self,v1,v2):
    if self.adjmatrix[v1][v2] == 0:
      print("No edge")
    else:
      self.adjmatrix[v1][v2] = 0
      self.adjmatrix[v2][v1] = 0

  def length(self):
    return self.size

  def display(self):
    for i in self.adjmatrix:
      for j in i:
        print("{:4}".format(j))


if __name__ == "__main__":
  Ggraph = Graph(5)
  Ggraph.add_edge(0,1)
  Ggraph.add_edge(1,2)
  Ggraph.add_edge(2,3)
  Ggraph.add_edge(0,3)
  Ggraph.add_edge(0,1)
  Ggraph.add_edge(1,3)
  Ggraph.display()
